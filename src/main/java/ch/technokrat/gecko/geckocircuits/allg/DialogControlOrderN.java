/*  This file is part of GeckoCIRCUITS. Copyright (C) ETH Zurich, Gecko-Simulations AG
 *
 *  GeckoCIRCUITS is free software: you can redistribute it and/or modify it under 
 *  the terms of the GNU General Public License as published by the Free Software 
 *  Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *  GeckoCIRCUITS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *  PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  GeckoCIRCUITS.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.technokrat.gecko.geckocircuits.allg;

import ch.technokrat.gecko.geckocircuits.control.RegelBlock;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragGestureRecognizer;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author florian
 */
public class DialogControlOrderN extends javax.swing.JDialog implements DragGestureListener, DragSourceListener, DropTargetListener{

    /**
     * Creates new form DialogControlOrderN
     */
    public DialogControlOrderN(final java.awt.Frame parent, final boolean modal, final List<RegelBlock> optimizedList) {
        
        super(parent, modal);
        
        setTitle("Control Order");
        initComponents();
        initButtonEvents();
        initLists(optimizedList);
        
        _dragSource = new DragSource();
        DragGestureRecognizer dragRec = _dragSource.createDefaultDragGestureRecognizer(jListUser, DnDConstants.ACTION_MOVE, this);
        _dropTarget = new DropTarget(jListUser, this);
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListOptimized = new javax.swing.JList();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListUser = new javax.swing.JList();
        jButtonReset = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setViewportView(jListOptimized);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");

        jLabel1.setText("Optimized Order");

        jLabel2.setText("User Defined Order");

        jListUser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jListUser);

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(225, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonReset))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initButtonEvents(){
        getRootPane().setDefaultButton(jButtonOK);
        
        jButtonOK.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(final ActionEvent event){
                System.out.println("OK pressed");
                final List<RegelBlock> userList = new ArrayList<RegelBlock>();
                for(int i=0; i<jListUser.getModel().getSize(); i++){
                    userList.add((RegelBlock) jListUser.getModel().getElementAt(i));
                    userList.get(i).setPriority(i);
                    /*System.out.print(userList.get(i));
                    System.out.print("\t");
                    System.out.println(userList.get(i).getPriority());*/
                }
                dispose();
            }
        });
        jButtonCancel.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(final ActionEvent event){
                System.out.println("Cancel pressed");
                dispose();
            }
        });
        jButtonReset.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(final ActionEvent event){
                System.out.println("Reset pressed");
                final DefaultListModel userModel = new DefaultListModel();
                for(int i=0; i<jListOptimized.getModel().getSize(); i++){
                    userModel.addElement(jListOptimized.getModel().getElementAt(i));
                }
                jListUser.setModel(userModel);
            }
        });
    }
    
    private void initLists(final List<RegelBlock> optimizedList){
        final DefaultListModel optModel = new DefaultListModel();
        final DefaultListModel userModel = new DefaultListModel();
        for(RegelBlock regelblock : optimizedList){
            optModel.addElement(regelblock);
            userModel.addElement(regelblock);
        }
        jListOptimized.setModel(optModel);
        jListUser.setModel(userModel);
    }
    
    
    
    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonOKActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DialogControlOrderN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DialogControlOrderN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DialogControlOrderN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DialogControlOrderN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                DialogControlOrderN dialog = new DialogControlOrderN(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jListOptimized;
    private javax.swing.JList jListUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    //not really, some more:
    DragSource _dragSource;
    Object _draggedObject;
    int _sourceIndex = -1;
    DropTarget _dropTarget;
    
    //DragNDrop Listeners:
    //DragGesture
    @Override
    public final void dragGestureRecognized(final DragGestureEvent dge) {
        final Point dragPoint = dge.getDragOrigin();
        final int index = jListUser.locationToIndex(dragPoint);
        if(index == -1){
            return;
        }
        _draggedObject = jListUser.getModel().getElementAt(index);
        _sourceIndex = index;
        final ControlOrderTransferable trans = new ControlOrderTransferable(_draggedObject);
        _dragSource.startDrag(dge, null, trans, this);
    }
    
    //DragSource
    @Override
    public void dragEnter(final DragSourceDragEvent dsde) {
        //
    }

    @Override
    public void dragOver(final DragSourceDragEvent dsde) {
        //throw new UnsupportedOperationException("Not supported yet.");
        //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void dropActionChanged(final DragSourceDragEvent dsde) {
        //
    }

    @Override
    public void dragExit(final DragSourceEvent dse) {
        //
    }

    @Override
    public final void dragDropEnd(final DragSourceDropEvent dsde) {
        _draggedObject = null;
        _sourceIndex = -1;
    }
    
    //DropTarget
    @Override
    public final void dragEnter(final DropTargetDragEvent dtde) {
        if (dtde.getSource() != _dropTarget){
            dtde.rejectDrag();
            return;
        }
        dtde.acceptDrag(DnDConstants.ACTION_COPY_OR_MOVE);
    }

    @Override
    public void dragOver(final DropTargetDragEvent dtde) {
        //
    }

    @Override
    public void dropActionChanged(final DropTargetDragEvent dtde) {
        //
    }

    @Override
    public void dragExit(final DropTargetEvent dte) {
        //
    }

    @Override
    public final void drop(final DropTargetDropEvent dtde) {
        if (dtde.getSource() != _dropTarget){
            dtde.rejectDrop();
            return;
        }
        final Point dropPoint = dtde.getLocation();
        final int index = jListUser.locationToIndex(dropPoint);
        if (index == -1 || index == _sourceIndex){
            dtde.rejectDrop();
            return;
        }
        dtde.acceptDrop(DnDConstants.ACTION_MOVE);
        final DefaultListModel model = (DefaultListModel) jListUser.getModel();
        model.remove(_sourceIndex);
        if (index < _sourceIndex){
            model.add(index, _draggedObject);
        } else {
            model.add(index-1, _draggedObject);
        }
        jListUser.setModel(model);
        dtde.dropComplete(true);
        
    }
    
    class ControlOrderTransferable implements Transferable { 
        Object _object; 
        public ControlOrderTransferable (final Object obj) {
            _object = obj;
        }
        @Override
        public Object getTransferData(final DataFlavor dataFl)
            throws UnsupportedFlavorException {
            if (isDataFlavorSupported (dataFl)){
                return _object;
            }else{
                throw new UnsupportedFlavorException(dataFl);
            }
        }
        @Override
        public boolean isDataFlavorSupported (final DataFlavor dataFl) {
            return true;
        }
        @Override
        public DataFlavor[] getTransferDataFlavors () {
            return new DataFlavor[0];
        } 
    }
    
    
}

