/*  This file is part of GeckoCIRCUITS. Copyright (C) ETH Zurich, Gecko-Simulations GmbH
 *
 *  GeckoCIRCUITS is free software: you can redistribute it and/or modify it under 
 *  the terms of the GNU General Public License as published by the Free Software 
 *  Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *  GeckoCIRCUITS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *  PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  GeckoCIRCUITS.  If not, see <http://www.gnu.org/licenses/>.
 */
package ch.technokrat.gecko.i18n.resources;

import ch.technokrat.gecko.i18n.LangInit;
import java.util.HashMap;
import java.util.Map;

public enum I18nKeys {

    FILE("File"),
    NEW("New"),
    OPEN("Open"),
    SAVE("Save"),
    LOAD("Load"), 
    SAVE_AS("Save As"),
    SAVE_AS_APPLET("Save as Applet"),
    SAVE_VIEW_AS_IMAGE("Save View as Image"),
    EDIT("Edit"),
    UNDO("Undo"),
    REDO("Redo"),
    UNDO_NOT_AVAILABLE("Undo (not available)"),
    REDO_NOT_AVAILABLE("Redo (not available)"),
    MOVE_ELEMENTS("Move Elements"),
    COPY_ELEMENTS("Copy Elements"),
    DELETE_ELEMENTS("Delete Elements"),
    DESELECT("Deselect"),
    SELECT_ALL("Select all"),
    ENABLE_DISABLE("Enable / Disable"),
    DISABLE("Disable"),
    SHORT_CIRCUIT_COMPONENT("Short-Circuit Component"),
    IMPORT("Import"),
    IMPORT_FROM_FILE("Import from File"),
    EXPORT("Export"),
    SIMULATION("Simulation"),
    VIEW("View"),
    WORKSHEET_SIZE("Worksheet Size"),
    SCALING("Scaling"),
    FONT_SIZE("Font Size"),
    USE_ANTIALIASING("Use Antialiasing"),
    NAME("Name"),
    SHOW_PARAMETER("Show Parameter"),
    SHOW_TEXT_LINE("Show Text-Line"),
    FLOW_DIRECTION("Flow Direction"),
    CHECK_CONNECTION("Check Connections"),
    CHECK_CONTROL_MODEL("Check control model"),
    FIND_IN_MODEL("Find in model"),
    SET_PARAMETERS("Set Parameters"),
    SET_ORDER_OF_CONTROL("Set Order of Control Blocks"),
    MEMORY_SETTINGS("Memory Settings"),
    UPDATE_SETTINGS("Update Settings"),
    REMOTE_ACCESS_SETTINGS("Remote Access Settings"),
    REMOTE_SETTINGS("remoteSettings"),
    HELP("Help"),
    ABOUT("About"),
    LICENSING("Licensing"),
    FEEDBACK("Feedback"),
    UPDATES("Updates"),
    GECKO("GECKO"),
    GECKOSCRIPT("GeckoSCRIPT"),
    GECKO_OPTIMIZER("GeckoOPTIMIZER"),
    GECKO_HEAT("GeckoHEAT"),
    GECKOMAGNETICS("GeckoMAGNETICS"),
    GECKOEMC("GeckoEMC"),
    EXIT("Exit"),
    CIRCUIT("Circuit"),
    MOTOR_AND_EMI("Motor & EMI"),
    SUBCIRCUIT("Subcircuit"),
    THERMAL("Thermal"),
    RELUCTANCE("Reluctance"),
    CONTROL("Control"),
    MEASURE("Measure"),
    DIGITAL("Digital"),
    MATH("Math"),
    SOURCE_SINK("Source/Sink"),
    SPECIAL("Special"),
    RESISTOR_R_OHM("Resistor R [Ohm]"),
    RESISTOR_RTH_K_W("Resistor Rth [K/W]"),
    VOLTAGE_SOURCE_U_V("Voltage Source U[V]"),
    MMF_AMP_TURNS("MMF [amp-turns]"),
    DEFINED_TEMPERATURE_C("Defined Temperature [Â°C]"),
    CAPACITOR_C_F("Capacitor C [F]"),
    CAPACITOR_CTH_JK("Capacitor Cth [J/K]"),
    CURRENT_SOURCE_I_A("Current Source I[A]"),
    HEAT_SOURCE_W("Heat Source [W]"),
    DIODE("Diode"),
    IDEAL_TRANSFORMER("Ideal Transformer"),
    OPERATIONAL_AMPLIFIER("Operational Amplifier"),
    BIPOLAR_TRANSISTOR("Bipolar Transistor"),
    THYRISTOR("Thyristor"),
    IGBT("IGBT"),
    IDAL_SWITCH("Ideal Switch"),
    MAGNETIC_COUPLING_K("Magnetic Coupling k"),
    INDUCTOR_COUPLING_LC_H("Inductor Coupling Lc [H]"),
    INDUCTOR_L_H("Inductor L [H]"),
    DC_MACHINE("DC Machine"),
    DC_MACHINE_PERM("PM DC Machine"),
    PMSM("PMSM"),
    SM_SAL("SM-SAL"),
    SM_RO("SM-RO"),
    INDUCTION_MACHINE("Induction Machine"),
    IM_CAGE("IM-CAGE"),
    IM_SAT("IM-SAT"),
    LISN("LISN"),
    THERMAL_TERMINAL("Thermal Terminal"),
    CONTROL_TERMINAL("Control Terminal"),
    RELUCTANCE_TERMINAL("Reluctance Terminal"),
    GLOBAL_RELUCTANCE_TERMINAL("Global Reluctance Terminal"),
    GLOBAL_CIRCUIT_TERMINAL("Global Circuit Terminal"),
    CIRCUIT_TERMINAL("Circuit Terminal"),
    GLOBAL_THERMAL_TERMINAL("Global Thermal Terminal"),
    CONTROL_MUX("Control MUX"),
    CONTROL_DEMUX("Control DEMUX"),
    MODEL_SAVED_OLD_VERSION("This Model file was created with an older version of GeckoCIRCUITS."),
    SAVE_MODEL_WARNING("When you save model files, please consider that you cannot open files"),
    MOSFET("MOSFET"),
    GENERATED_BY_OLDER_RELEAES("generated by this Version of GeckoCIRCUITS with older releases."),
    INFO("Info"),
    POINT_10("10 point"),
    POINT_12("12 point"),
    POINT_14("14 point"),
    POINT_16("16 point"),
    POINT_18("18 point"),
    POINT_6("6 point"),
    POINT_8("8 point"),
    TOOLS("Tools"),
    ELECTROMAGNETIC_3D("Electromagnetic 3D-Model"),
    FILTER_OPTIMIZATION("Filter Optimization"),
    OPTIMIZE("optimize"),
    CIRCUIT_SIMULATION_FILES_IPES("Circuit Simulation Files (*.ipes)"),
    WARNING_EXCLAMATION("Warning!"),
    CHECK_AUTOBACKUP_DISABLED("Warning: Check for auto-backup file disabled!"),
    DISABLE_SHORT("DisableShort"),
    JAR_SIMULATION_APPLET_JAR(".jar Simulation Applet (*.jar)"),
    ERROR_EXCLAMATION("Error!"),
    STOPPED_AFTER("Stopped after "),
    //INIT_START("InitTxtStart", "Init TxtI.ti_InitStart Start"),
    PAUSE("Pause"),
    CONTINUE("Continue"),
    ABORTING_PROGRAM_EXIT_EXCL("Aborting, program exit!"),
    CANNOT_EXIT_APPLET_SETTING_INVISIBLE("Cannot exit applet. Setting invisible!"),
    WARNING("Warning"),
    SYSTEM_SIMULATOR("System Simulator"),
    ERROR_COULD_NOT_CREATE_CONTROL("Error! Could not create control block with id:"),
    ERROR_FILE_NOT_FOUND("ERROR: File not found"),
    OK("Ok"),
    CONTROL_PORTS_WITHOUT_CONNECTION("Control Ports without connection"),
    VECTOR_SIGNAL("Vector signal"),
    DEMUXED_VECTOR_SIGNAL("De-multiplexed vector signal"),
    INPUT_PORTS("Input ports"),
    OUTPUT_PORTS("Output ports"),
    USER_DEFINED_ORDER("User Defined Order"),
    RESET("Reset"),
    OPTIMIZED_ORDER("Optimized Order"),
    LAUNCH_BROWSER("Launch Browser"),
    CLOSE_WINDOW("Close Window"),
    EXACT_MATCH("Exact match"),
    SEARCHING_FOR_STRING("Search for String:"),
    FOUNT_ITEMS("Found items:"),
    PLEASE_INSERT_SEARCH_TEXT("Please insert search text"),
    IGNORE_CASE("Ignore case"),
    GECKOCIRCUITS_LICENSING("GeckoCIRCUITS Licensing"),
    FILE_PATH("File path:"),
    CONVERT_INTERNAL_FILE_TO_EXTERNAL("Convert internal file to external file"),
    STATUS("Status"),
    USE_FILE_FROM_DISK("Use file from disk"),
    CREATE_FILE("Create file"),
    GECKOCIRCUITS_MEMORY("GeckoCIRCUITS Memory"),
    STARTUP_MEMORY("Startup memory"),
    SEE_INFO_TAB_FOR_INFORMATION("(see \"Info-tab\" for information)"),
    MEMORY_AT_STARTUP("Memory at startup:"),
    MEGA_BYTES_MB("MB"),
    JVM_MEMORY_INFORMATION("JVM memory information"),
    SETTINGS("Settings"),
    LOSSY_COMPRESSION_RATIO("Lossy compression ratio:"),
    CURRENTLY_USED_MEMORY("Currently used memory:"),
    ZERO_MB("0 MB"),
    TOTAL_MEMORY("Total memory:"),
    CHANGES_APPLY_AFTER_RESTART("(changes apply after restart of GeckoCIRCUITS)"),
    SCOPE_MEMORY_HANDLING("Scope memory handling"),
    REMOTE_ACCESS_OF_GECKOCIRCUITS_IS("Remote acess of GeckoCIRCUITS is"),
    CONNECTION_SETTINGS("Connection settings"),
    CONNECTION_TEST("Connection test"),
    APPLY("Apply"),
    ENABLED("Enabled"),
    REMOTE_ACCESS_SETUP("Remote Access Setup"),
    AT_PORT("at port:"),
    DISABLED("Disabled"),
    HEIGHT("Height:"),
    WIDTH("Width:"),
    RELEASE_NUMBER("Release number:"),
    YOUR_GECKOCIRCUITS_VERSION("Your GeckoCIRCUITS version"),
    DOWNLOAD_UPDATE_FROM_SERVER("Download update from server (.zip-file)   "),
    RELEASE_DATE("Release date:"),
    GET_UPDATE_INFORMATION("Get update information"),
    AVAILABLE_UPDATE("Available update"),
    NEW_FEATURES_CHANGES("New features / changes:"),
    ADD_SELECTED_FILES_TO_LOCAL("Add Selected File(s) to local block"),
    FILES_ALREADY_AVAILABLE("Files already available in model (used by other elements):"),
    JAVA_SOURCE_FILE("Java Source File"),
    ADD_NEW_FILE("Add New File"),
    FILE_STATUS("File Status"),
    FILE_TYPE("File type:"),
    STAR_JAVA("*.java"),
    EXTERNAL("External"),
    INTERNAL("Internal"),
    MODIFY_FILE_TYPE("Modify file type"),
    FILES_IN_THIS_ELEMENT("Files in this element:"),
    REMOVE_SELECTION("Remove Selection"),
    GECKO_FILE_MANAGER_ADD_EXTERNAL_FILES("Gecko File Manager - add external files to your model"),
    ABORT_SIMULATION("Abort simulation"),
    TRY_TO_CONTINUE("Try to continue"),
    COLOR("Color"),
    INFORMATION("Information"),
    GRAYSCALE("Grayscale"),
    PNG_FILE("png"),
    PDF_FILE("pdf"),
    SVGZ_FILE("svgz"),
    CREATE_IMAGE("Create Image"),
    GIF_FILE("gif"),
    SCALING_COLON("Scaling:"),
    JPG_FILE("jpg"),
    EXPORT_IMAGE("Export Image"),
    SVG_FILE("svg"),
    FILENAME("Filename:"),
    FILE_FORMAT("File format"),
    NUMERICAL_INSTABILITY(" Numerical Instability"),
    OPTIMIZATION_CODE_PROCESSOR(" Optimization Code Processor"),
    COMPILE_CODE("Compile Code"),
    RUN_OPTIMIZATION("Run Optimization"),
    COMPILER_MESSAGE("Compiler Messages"),
    INTERFACING_GECKOCIRCUITS("Interfacing GeckoCIRCUITS: "),
    LICENSE_INFORMATION(" Licence Information"),
    MATRIX_IS_SINGULAR(" Matrix is Singular"),
    LOAD_CREATE_NEW_WITHOUT_SAVING(" Load/Create New Without Saving?"),
    YES("Yes"),
    NO("No"),
    CANCEL("Cancel"),
    PARAMETER("Parameter"),
    WARNINGS("Warnings"),
    ERRORS("Errors"),
    PARAMETER_SET("Parameter Set"),
    PARAMETERS("Parameters"),
    SIMULATIOIN_PARAMETERS(" Simulation Parameters"),
    TRANSIENT("Transient"),
    STEADY_STATE("Steady-State"),
    SOLVER("Solver"),
    INTEGRATION_ALGORITHM_SELECTION("Integration algorithm selection"),
    GEAR_SHICHMAN_TEXT("Gear-Shichman: Behavior is in between Trapezoidal and Backward Euler methods"),
    UNTITLED("Untitled"),
    READY_DOTS("Ready ..."),
    APPLET_MODE_GECKOCIRCUITS("*** Applet-Mode *** GeckoCIRCUITS ***"),
    PROBABLY_NON_ASCII("Probably non-ASCII-Characters are not resolved properly. "),
    PROGRAM_IS_EXITING_NOW("Program is exiting now."),
    ERROR("Error"),
    GLOBAL_PARAMETERS_CHANGED("Global parameters changed"),
    SIMULATION_ABORTED("Simulation aborted."),
    STARTING_SIMULATION("Starting Simulation ... "),
    COULD_NOT_ALLOCATE_ENOUGH("Could not allocate enough java RAM memory for the simulation!"),
    MEMORY_ERROR("Memory error !"),
    SEVERE_ERROR("Severe error!"),
    APPLET_MODE_SELECT_EXAMPLE(" Applet-Mode: Select Example"),
    CONTROL_ORDER("Control Order"),
    EXAMPLE_2("Example 2"),
    EXAMPLE_1("Example 1"),
    CODE("Code"),
    THIS_MODEL_FILE_CREATED_NEWER("This Model file was created with a newer version of GeckoCIRCUITS."),
    PLEASE_CONSIDER_UPDATE("Please consider to update your Software to the newest version."),
    YOU_CAN_FIND_UPDATE_INFO("You can find update information in the menu Help -> Updates."),
    SELECT_A_SIMULATION_MODE_FROM_LIST("Select a simulation model from the list. "),
    WE_WANT_TO_IMPROVE_OUR_SOFTWARE("<html>We want to improve our software! If you would like to submit a bug-report, <br>give us suggestions about features that we should implement in the software, <br>or you have other issues, then please visit our bugtracking homepage:"),
    BATIK_LICENSE("GeckoCIRCUITS uses the \"Batik SVG Vector-Graphics libraries\" and \"JSyntaxPane\", which are both licensed under the Apache License (Version 2.0):"),
    YOU_ATTEMPTED_TO_CLOSE_WHILE_SIMULINK("You attempted to close GeckoCIRCUITS while running in Simulink-mode."),
    ONLY_CLOSING_MATLAB("Please note that only closing your MATLAB session will close GeckoCIRCUITS."),
    BEFORE_EXITING_GECKOCIRCITS("before exiting GeckoCIRCUITS?"),
    WARNING_EXIT_GECKOCIRCUITS_WITHOUT_SAVING("Warning: Exit GeckoCIRCUITS without saving!"),
    JAR_FILE_DOES_NOT_EXIST("Jar-File does not exist:"),
    COULD_NOT_WRITE_TO_OUTPUT_FILE("Could not write to output file: "),
    ERROR_MESSAGE(" Error-message: "),
    COULD_NOT_FIND_PATH_TO_GECKOCIRCITS_INSTALL("Could not find path to GeckoCIRCUITS installation: "),
    T_PRE_THE_SIM("T_pre, dt_pre: The simulation is executed with the simulation time of T_pre and the stepwidth"),
    OF_DT_PRE_IN_ADVANCE(" of dt_pre in advance of the regular simulation. This enables an easy finding of the"),
    STEADY_STATE_SOLUTION(" steady state solution."),
    WARNING_NODE_NUMBER(" Warning: Node Number"),
    WARNING_REDUNDANT_INPUT("*** WARNING: Redundant Input ***"),
    WARNING_IRRELEVANT_INPUT("*** WARNING: Irrelevant Input ***"),
    YOU_CAN_PROCEED_WITH_CURRENT("You can proceed with the simulation with the current parameter set."),
    ERROR_PARAMETER_DEFINITION_MISSING("*** ERROR: Parameter Definition Missing ***"),
    NO_ERRORS("No Errors."),
    THE_SIM_CANNOT_START("The simulation cannot be started. Please set the missing parameters first."),
    USE_THE_INTERFACE_METHODS("Use the following Interface-methods to control GeckoCIRCUITS:"),
    BACKWARD_EULER_EXPLANATION("Backward-Euler: Very stable, with some numeric damping"),
    TRAPEZOIDAL_EXPLANATION("Trapezoidal: No numeric damping, possibly unstable"), 
    WRITE_DATA_TO_FILE("Write data to file"), 
    LEVEL_UP("Level up"),
    INIT_AND_START("Init & Start"), 
    SHEET_SETTINGS("Sheet settings"),
    NEW_TERMINAL("New terminal"), 
    SHOW_INFORMATION("Show information"), 
    CALCULATE("Calculate"), 
    ADD_GRAPH("Add graph"), 
    DELETE("Delete"), 
    UP("Up"), 
    DOWN("Down"), 
    DELETE_GRAPH("Delete graph"), 
    ADD_FREQUENCY("Add frequency"), 
    REMOVE_FREQUENCY("Remove frequency"), 
    SHOW("Show"), 
    IMPORT_DATA("Import data"), 
    DEFINE_CHARACTERISTIC("Define characteristic"), 
    LOAD_SEMICONDUCTOR("Load semiconductor"), 
    EDIT_SEMICONDUCTOR("Edit semiconductor"), 
    CREATE_NEW("Create new"), 
    OVERWRITE_AND_SAVE_CHANGES("Overwrite & Save Changes"), 
    SAVE_AS_NEW("Save as new"),         
    ADD_NEW("Add new"), 
    TEST_SCRIPT("Test script"), 
    IDEAL_DIODE_WITH_ON_RESISTANCE("Ideal diode with on-resistance, off-resistance and forward voltage drop"), 
    INSULATED_GATE_BIPOLAR_TRANSISTOR("Insulated Gate Bipolar Transistor (ideal switch model with series diode)"), 
    LINE_IMPEDANCE_STABILIZATION_NETWORK("Line Impedance Stabilization Network (LISN)"), 
    INDUCTOR_THAT_CAN_BE_COUPLED("Inductor that can be coupled via magnetic coupling components (mutual inductances)"), 
    LC_INDUCTOR_SELECTION("Lc Inductor selection"), 
    NO_LC_FOUND("No Lc-Component found in circuit."), 
    IDEALIZED_METAL_OXIDE_FIELD_EFFECT("Idealized Metal Oxide Field Effect Transtor with integrated anti-parallel ideal diode"), 
    SQUIRREL_CAGE_INDUCTION_MACHINE("Squirrel Cage Induction Machine"), 
    SATURABLE_INDUCTION_MACHINE("Saturable Induction Machine"), 
    NO_USABLE_CIRCUIT_COMPONENT("No usable circuit components defined in circuit sheet."), 
    DIRECT_POTENTIAL_CONTROL("Direct Potential Control"), 
    PERMANENT_MAGNET_SYNCHRONOUS_MACHINE("Permanent Magnet Synchronous Machine"), 
    PERMANENT_MAGNET_DC_MACHINE("Permanent Magnet DC Machine"),
    ROUND_ROTOR_SYNCHRONOUS_MACHINE("Round Rotor Synchronous Machine"), 
    SALIENT_POLE_SYNCHRONOUS_MACHINE("Salient Pole Synchronous Machine"), 
    INDUCTOR_RELUCTANCE("Inductor-Reluctance"), 
    NONLINEAR_RELUCTANCE("Nonlinear Reluctance"), 
    INDUCTOR_RELUCTANCE_COUPLING_COMPONENT("Inductor-Reluctance: Coupling component between<br>electric and reluctance circuit"), 
    NONLINEAR_RELUCTANCE_DESCRIPTION("Flux dependent Reluctance: Enables inductor modeling <br> with core saturation effects."), 
    REFERENCE_TEMPERATURE("Reference Temperature"), 
    POWER_MODULE_THERMAL_MODEL("Power module thermal model"), 
    THERMAL_LOSS_W("Component Loss [W]"), 
    SELECT_LOSS_COMPONENT("Select loss component"), 
    JAVA_FUNCTION("Java-Function"), 
    C_DLL("C/C++ Function"), 
    TEXT_FIELD("Text Field"), 
    NO_CIRCUIT_COMPONENT_DEFINED("No circuit component defined in circuit sheet"), 
    MEASURE_VOLTAGE_AT_COMPONENT("Measure voltage at component"), 
    VOLTAGE_MEASUREMENT_V("Voltage Measurement [V]"), 
    MEASURED_VOLTAGE_V("measured voltage (V)"), 
    MEASURED_MACHINE_INTERNAL("measured selected machine internal property"), 
    MACHINE_INTERNAL("Machine-Internal"), 
    SELECT_MACHINE("Select machine"), 
    NO_MOTOR_DEFINED_IN_CIRCUIT_SHEET("No Motor defined in circuit sheet."), 
    U_ZI_DIAGRAM("U-Z*i Diagram"), 
    TRANSFER_FUNCTION_OUTPUT_SIGNAL("transfer function output signal"), 
    DEFINES_A_TRANSFER_FUNCTION("Defines a transfer function via poles/zeros or a rationale polynom"), 
    TRANSFER_FUNKTION_H_S("Transfer Function H(s)"), 
    EXPORT_DATA_TO_SIMULINK("Export Data to Simulink"), 
    THYRISTOR_CONTROL("Thyristor Control"), 
    GATE_SIGNAL("Gate signal"), 
    SIMULATION_TIME("Simulation Time"), 
    TEMPERATURE_MEASUREMENT("Temperature Measurement"), 
    NO_THERMAL_COMPONENTS_DETECTED("No thermal components detected in circuit sheet."), 
    MEASURED_TEMPERATURE_K("measured temperature (K)"), 
    TANGENS_OF_INPUT_RAD("Tangens of input (rad)" ), 
    INPUT_1_MINUS_INPUT_2("input 1 minus input 2"), 
    SPACE_VECTOR_DIAGRAM("Space Vector Diagram"), 
    SDFT("SDFT"), 
    SLIDING_FOURIER_TRANSFORM_DESCRIPTION("Sliding fourier transform of input"), 
    SIGNUM("Signum function"), 
    SIGN_OF_INPUT("sign (+,-,0) of input expressed as (+1,-1,0)"), 
    ABC_DQ_TRANSFORM("abc>>dq transformation"), 
    D_ROTATING_AXIS_COORDINATE("d rotating axis coordinate"), 
    Q_ROTATING_AXIS_COORDINATE("q rotating axis coordinate"), 
    ABSOLUTE("Absolute"),
    ABSOLUTE_VALUE_OF_INPUT("Absolute value of input"), 
    JAVA_FUNCTION_OUTPUT_SIGNAL("Java function output signal"), 
    GLOBAL_CONTROL_TERMINAL("Global Control Terminal"), 
    OUTPUT_MEASURED_IN_RAD("Output is measured in [rad]."), 
    SUM_OF_INPUTS("Sum of inputs"), 
    SELECT_CIRCUIT_COMPONENT("Select circuit component"), 
    CURRENT_MEASUREMENT_A("Current Measurement [A]"), 
    LOGICAL_AND_OPERATION_OF_INPUTS("Logical and operation of inputs"), 
    AREA_COSINE_MEASURED_IN_RAD("Area cosine measured in rad"), 
    ASIN("ASIN"),
    ACOS("ACOS"),
    ATAN("ATAN"),    
    AREA_SINE_MEASURED_IN_RAD("Area sine measured in rad"),
    AREA_TANGENS_MEASURED_IN_RAD("Area tangens measured in rad"), 
    EMI_TEST_RECEIVER("EMI Test Receiver"), 
    CONSTANT_VALUE("Constant value"), 
    NO_INPUT_TERMINALS("The number of input terminals of this component."),
    NO_OUTPUT_TERMINALS("The number of output terminals of this component."),
    COSINE_MEASURED_IN_RAD("Cosine measured in rad"), 
    SINE_MEASURED_IN_RAD("Sine measured in rad"), 
    SIN("SIN"),
    COS("COS"),
    TAN("TAN"),
    COUNT_NUMBER_OF_INPUTS_RISING("Count number of input rising-edge transitions"), 
    PHASE_A("Phase a"),
    PHASE_B("Phase b"),
    PHASE_C("Phase c"), 
    DQ_ABC_TRANSFORMATION("dq>>abc transformation"), 
    OUTPUT_DELEAYED_BY_TIME("output delayed by specified time"), 
    NATURAL_LOGARITHM_LN("Natural logarithm (ln)"), 
    LN("LN"),
    SIGNAL_SOURCE("Signal Source"), 
    DATA_FROM_FILE("Data from File"), 
    RANDOM_WALK("Random Walk"), 
    DATA_EXPORT_TO_FILE("Data export to file"), 
    SAMPLE_HOLD("Sample-Hold"), 
    SAMPLED_INPUT("Sampled output of input signal"), 
    SQUARE_ROOT_OF_INPUT("Square root of input"), 
    SQRT("SQRT"),
    SQUARE_OF_INPUT_DESCRIPTION("Square of input"), 
    SQUARE("Square"), 
    SPARSE_MATRIX_CONVERTER_CONTROL_DESCRIPTION("Sparse control block for sparse matrix converters"), 
    SPARSE_MATRIX_CONVERTER_CONTROL("Sparse control"),     
    INPUT_ROUNDED_TO_INTEGER_DESCRIPTION("Input rounded to the nearest integer"), 
    ROUND("Round"), 
    PT2_CONTROL("PT2"), 
    PT2_CONTROL_DESCRIPTION("Second order filter"), 
    PT1_CONTROL_DESCRIPTION("First order low-pass filter"), 
    POW_DESCRIPTION("Power function: input1 to the power of input2"),     
    POW("POW"),
    PMSM_MODULATOR("PMSM modulator"),     
    PMSM_CONTROLLER("PMSM controller"), 
    VOLTAGE_ALPHA_IN_ALPHA_BETA_COORDINATES("Voltage alpha (in alpha-beta-coordinate system"),
    VOLTAGE_BETA_IN_ALPHA_BETA_COORDINATES("Voltage beta (in alpha-beta-coordinate system"), 
    VOLTAGE_D_STAR("Reference voltage d_star in d-q-coordinates"),
    CURRENT_D_STAR("Reference current d_star in d-q-coordinates"),
    VOLTAGE_Q_STAR("Reference voltage q_star in d-q-coordinates"),
    CURRENT_Q_STAR("Reference current q_star in d-q-coordinates"),
    CURRENT_D("Current d in d-q-coordinates"),
    CURRENT_Q("Current q in d-q-coordinates"), 
    PROPORTIONAL_INTEGRAL_CONTROL_DESCRIPTION("Proportional-Integral of input"), 
    PI_CONTROLPROPORTIONAL_INTEGRAL_CONTROL_DESCRIPTION("Proportional-Integral of input"), 
    PI_CONTROL("PI"), 
    PD_CONTROL("PD"), 
    PROPORTIONAL_DIFFERENTIATED_OUTPUT("Proportionally differentiated input signal"), 
    NO_LOSS_COMPONENT_DEFINED_IN_CIRCUIT_SHEET("No loss component defined in circuit sheet."), 
    OR("OR"), 
    LOGICAL_OR_OPERATION_OF_INPUTS("Logical OR operation of inputs"), 
    COMPONENT_FOR_DATA_VISUALIZATION("Component for data visualization and plotting of simulation curves."), 
    SCOPE("Scope"), 
    LOGICAL_NOT_OPERATION("Logical NOT operation on input"), 
    NOT_EQUAL("Not Equal (!=)"), 
    NOT_EQUAL_DESCRIPTION("1 if input1!=input2, 0 otherwise"), 
    MULTIPLICATION_OF_INPUT("Multiplication of input values"), 
    MMF_MEASURE_A("MMF Measurement [A]"), 
    MEASURE_MMF_AT_COMPONENT("Measure MMF at component"), 
    NO_RELUCTANCE_COMPONENT_DEFINED_IN_CIRCUIT("No reluctance component defined in circuit sheet"), 
    MINIMUM("Minimum"), 
    SMALLEST_VALUE_OF_THE_INPUTS("Smallest value of the inputs"), 
    LARGEST_VALUE_OF_THE_INPUTS("Largest value of the inputs"),     
    OUTPUT_LIMITED_BY_SPECIFIED_BOUNDS("output limited by specified bounds"), 
    LIMITER("Limiter"), 
    MAXIMUM("Maximum"), 
    HYTERESIS_OUTPUT("Hysteresis output (1 if input>=h, -1 otherwise)"), 
    HYSTERESIS("Hysteresis"), 
    INTEGRAL_OUTPUT_LIMITED("Integral of input signal limited by specified bounds"), 
    INTEGRATOR("Integrator"), 
    GREATER_THAN_OUTPUT("1 if input1>input2, 0 otherwise"), 
    GREATER_THAN("Greater (>)"), 
    GREATER_EQUAL_OUTPUT("1 if input1>=input2, 0 otherwise"), 
    GREATER_EQUAL("Greater-Equal (>=)"), 
    GATE_CONTROL("Gate Control"), 
    NO_SWITCH_EXISTING_IN_CIRCUIT_SHEET("No switch existing in circuit sheet."), 
    SELECT_SWITCH_TO_BE_CONTROLLED("Select switch to be controlled"), 
    OUTPUT_MULTIPLIED_BY_SPECIFIED_GAIN("output multiplied by specified gain"), 
    GAIN("GAIN"), 
    IMPORT_DATA_FROM_SIMULINK("Import Data from Simulink"), 
    SELECT_RELUCTANCE_COMPONENT("Select reluctance component"), 
    FLUX_MEASUREMENT_WB("Flux Measurement [Wb]"), 
    NO_RELUCTANCE_ELEMENT_IN_CIRCUIT_SHEET("No reluctance elements in circuit sheet."), 
    MEASURED_FLUX_WEBER("measured flux (weber)"), 
    HEATFLOW_MEASUREMENT_W("Heatflow Measurement [W]"), 
    SELECT_THERMAL_COMPONENT("Select thermal component"), 
    MEASURED_HEAT_FLOW_W("measured heat flow [W]"), 
    EXP("EXP"), 
    E_INPUT("e^input"), 
    LOGICAL_XOR_OPERATION_ON_INPUTS("logical xor operation on inputs"), 
    XOR("XOR"), 
    EQUAL_DESCRIPTION("1 if input1=input2, 0 otherwise"), 
    EQUAL("Equal (==)"), 
    QUOTIENT("quotient"), 
    DIVISION_OF_INPUT_1_BY_INPUT_2("Division of input1 by input2"), 
    DIVISION("Division"), 
    PT1("PT1"), 
    MAGNETIC_COUPLING_DESCRIPTION("Magnetic coupling of Lc Components"), 
    ADDITION("Addition"), 
    SUBTRACTION("Subtraction"), 
    MULTIPLICATION("Multiplication"), 
    SMALL_SIGNAL_ANALYIS("Small signal analysis"),
    AMPLITUDE("Amplitude of excitation small signal"),
    NOT("NOT"), 
    AND("AND"), 
    DELAY("Delay"), 
    COUNTER("Counter"),
    TEMP_AT_WHICH("temperature at which curve was measured"),
    FORWARD_AMP_FACTOR("Forward amplification factor"),
    BACKWARD_AMP_FACTOR("Backward amplification factor"),
    INTERNAL_BASE_RES("Internal base resistance"),
    INTERNAL_EM_RES("Internal emitter resistance"),
    INTERNAL_COL_RES("Internal collector resistance"),
    SEMICONDUCTOR_FORWARD_VOLTAGE("Semiconductor forward voltage drop"),
    IF_TRUE_THEN_NPN("If true, NPN type is used, otherwise PNP"),
    IF_TRUE_USE_NONLINEAR_CHARACTERISTIC("If true, use nonlinear characteristic of circuit component"),
    IF_TRUE_TRANSPOSE_DATA("If true, exchange output rows/columns (transposition)"),
    SKIP_DATA_POINTS("If number > 1, every n'th data point is used (and (n-1)th are skipped) when saving the data to a file."),
    IF_TRUE_PRINT_HEADER("If true, print header information into data file"),
    SIGNIFICANT_DIGITS("Determines the number of digits written to the file for every data point. Reducing this value"
            + " decreases the output file size, but also reduces data accuracy."),
    CURVE_MEASURED_AT_VOLTAGE("curve measured at voltage"),
    TYPE_OF_SOURCE("type of source (AC/DC, ...)"),
    PHASE_SHIFT_OF_WAVEFORM("phase shift of waveform"),
    FREQUENCY("frequency"),
    SHOW_DETAILS_IN_GUI("Show details in GUI"),
    NON_ACCESSIBLE("non-accessible"),
    GAIN_FOR_DIRECT_POTENTIAL_CONTROL("Gain for direct potential control"),
    INDUCTANCE("inductance"),
    INITIAL_CURRENT("initial current"),
    POLE_PAIRS("pole pairs"),
    INERTIA("inertia"),
    INITIAL_ROTATION_SPEED("initial rotational speed"),
    FRICTION_COEFFICIENT("friction coefficient"),
    INITIAL_ROTOR_POSITION("initial rotor position"),
    INITIAL_ARMATURE_CURRENT("initial armature current"),
    ARMATURE_RESISTANCE("armature resistance"),
    ARMATURE_INDUCTANCE("armature inductance"),
    MAGNETIZING_INDUCTANCE("magnetizing inductance"),
    STATOR_LEAKAGE_INDUCTANCE("stator leakage inductance"),
    ROTOR_RESISTANCE("rotor resistance"),
    ROTOR_LEAKAGE_INDUCTANCE("rotor leakage inductance"),
    INITIAL_STATOR_FLUX_D("initial stator flux D"),
    INITIAL_STATOR_FLUX_Q("initial stator flux Q"),
    FLUX_AT_SATURATION_TRANSITION("flux at saturation transition"),
    TIGHTNESS_OF_SATURATION_TRANSITION("tightness of saturation transition"),
    FIELD_RESISTANCE("field resistance"),
    FIELD_LEAKAGE_INDUCTANCE("field leakage inductance"),
    DAMPER_RESISTANCE("damper resistance"),
    INITIAL_FIELD_CURRENT("initial field current"),
    DAMPER_LEAKAGE_INDUCTANCE_D("damper leakage inductance D"),
    DAMPER_LEAKAGE_INDUCTANCE_Q("damper leakage inductance Q"),
    UNSATURATED_MAGNETIZING_INDUCTANCE("unsaturated magnetizing inductance"),
    SATURATED_MAGNETIZING_INDUCTANCE("saturated magnetizing inductance"),
    ON_RESISTANCE("on resistance"),
    OFF_RESISTANCE("off resistance"),
    CURRENT_DEPENDENT_COEFFICIENT_ON("current dependent coefficient for turn-on losses"),
    CURRENT_DEPENDENT_COEFFICIENT_OFF("current dependent coefficient for turn-off losses"),
    NUMBER_OF_DEVICES_PARALLEL("Number of devices connected in parallel implementing this component"),
    BLOCKING_VOLTAGE_FOR_SWITCHING("Blocking voltage for switching loss constants k_on and k_off"),
    STATOR_RESISTANCE("stator resistance"),
    INITIAL_STATOR_CURRENT_A("initial stator current A"),
    INITIAL_STATOR_CURRENT_B("initial stator current B"),
    INITIAL_VOLTAGE("initial voltage"),
    INITIAL_TEMPERATURE("initial temperature"),    
    OFFSET_OF_WAVEFORM_FROM_ZERO("offset of waveform from zero"),
    FORWARD_VOLTAGE_DROP("Forward voltage drop"),
    IF_ZERO_ISAT_DISABLED("if 0: iSAT diabled, if 1: iSAT enabled"),
    IGBT_SATURATION_CURRENT_VALUE("IGBT saturation current value"),
    REVERSE_MAGNETIC_COUPLING("Reverse magnetic coupling"),
    WINDING_NUMBER_SECONDARY_SIDE("Winding number secondary side"),
    WINDING_NUMBER_PRIMARY_SIDE("Winding number primary side"),
    RATIO_OF_WINDINGS("Ratio of windings primary side / secondary side"),
    ON_RESISTANCE_ANTIPARALLEL("On-resistanceof the antiparallel diode"),
    OFF_RESISTANCE_ANTIPARALLEL("Off-resistanceof the antiparallel diode"),
    FORWARD_VOLTAGE_ANTIPARALLEL("Forward voltage drop of the antiparallel diode"),
    FIELD_INDUCTANCE("field inductance"),
    FIELD_WINDINGS("field windings"),
    MACHINE_CONSTANT("machine constant"),
    FLUX_LINKAGE("flux linkage"),
    STATOR_INDUCTANCE_D("stator inductance D"),
    STATOR_INDUCTANCE_Q("stator inductance Q"),
    PERMANENT_MAGNET_FLUX_LINKAGE("permanent magnet flux linkage"),
    INITIAL_DAMPER_CURRENT("initial damper current"),
    INPUT_RESISTANCE("input resistance"),
    OUTPUT_RESISTANCE("output resistance"),
    FREQUENCY_DEPENDENCY("frequency dependency"),
    VOLTAGE_LIMITATION_MAXIMUM("voltage limitation max."),
    VOLTAGE_LIMITATION_MINIMUM("voltage limitation min."),
    VOLTAGE_DIVIDER("voltage divider"),
    WINDING_NUMBER("Winding number"),
    INPUT_REVERSED("Input reversed"),
    OUTPUT_REVERSED("Output reversed"),
    REVERSE_RECOVERY_DELAY("reverse recovery delay"),
    PEAK_AMPLITUDE("Peak amplitude (sinus/triangle/rect)"),
    DC_VALUE_OF_SOURCE("DC (constant) value of source component"),    
    X_BLOCK_DIMENSION("Horizontal dimension of the component block"),
    Y_BLOCK_DIMENSION("Vertical dimension of the component block"),
    X_SHEET_SIZE("Horizontal size of the subcircuit sheet"),
    Y_SHEET_SIZE("Vertical size of the subcircuit sheet"),
    TIME_CONSTANT("time constant"),    
    TITLE_TEXT("title text"),
    CONTENTS_TEXT("contents text"),
    BACKGROUND_COLOR("background color"),
    FOREGROUND_COLOR("foreground color"),    
    GATE_ON_TIME_SEC("Gate on-time (sec)"),
    INITIAL_FREQUENCY_HZ("Initial Frequency (Hz)"),
    PHASE_SHIFT_DEGREES("Phase-shift in degrees"),
    AVERAGING_TIME("averaging time"),
    IF_TRUE_MORE_INFORMATION("If true (=1), more information is shown at the control block"),
    IF_TRUE_EXTERNAL_TERMINALS("If true (=1), external terminals are used for parameter input"),
    DUTY_RATIO("duty ratio"),
    SIGNAL_PHASE_DELAY("signal phase delay (degrees)"),
    TYPE_OF_SIGNAL_SOURCE("Signal source tpye: Sinus: 0, Triangle: 1, Rectangle: 2, Random: 3, Import: 4"),
    INTEGRATOR_COEFFICIENT("integrator coefficient"),
    DIFFERENTIATOR_COEFFICIENT("differentiator coefficient"),
    UPPER_LIMIT("upper limit"),
    LOWER_LIMIT("lower limit"),
    INITIAL_VALUE("initial value"),
    HYSTERESIS_THRESHOLD("hysteresis threshold (1 if input>=h, -1 otherwise)"),
    DELAY_INPUT("delay input by specified time in seconds"),
    DISPLAY_COMPONENT_NAME_IN_CIRCUIT_SHEET("display component name in circuit sheet"),
    USE_MATRICES_FOR_JAVA_CODE_INPUT_OUTPUT("Use matrices for Java code input/output variables xIN and yOUT instead of vectors."),
    ENABLE_DEBUGGING_OPTIONS("When enabled, source files will be saved on hard-disk for debugging purposes."),
    FIXED_BUS_ENABLED("Enable or disable fixed output bus width"),
    OUTPUT_BUS_WIDTH("Width of the output signal bus, can be used in combination with DEMUX."),
    CONSIDER_PEAK_CALCULATION("consider the peak calculation"),
    CONSIDER_QUASI_PEAK_CALCULATION("consider the quasi-peak calculation"),
    FILTER_THRESHOLD("Strength of frequency selection filter - 0: off, 1: strong filtering"),
    CONSIDER_AVERAGE_CALCULATION("consider the average calculation"),
    CONSIDER_FOURIER_CALCULATION("consider the fourier calculation"),
    CONSIDER_MAXIMUM_ESTIMATION("consider the maximum estimation"),
    CONSIDER_MINIMUM_ESTIMATION("consider the minimum estimation"),
    USE_BLACKMAN_WINDOW("use a blackman window for filtering"),
    SHOW_OUTPUTS_AS_RMS_VALUES("show outputs as RMS values"),
    AUTO_QP_SELECTION("Detect QP frequencies automatically."),
    MAXIMUM_FREQUENCY_IN_CALCULATION("Maximum frequency to consider in calculation"),
    QP_INTERVAL("Selection of QP frequency calculation interval."),
    MINIMUM_FREQUENCY_IN_CALCULATION("Minimum frequency to consider in calculation"), 
    NOT_DEFINED("not defined"),
    SHOW_LINES("show lines"),
    MAGNETICALLY_COUPLED("Magnetically Coupled"), 
    NO_CONNECTION_ESTABLISHED("No Connection established."), 
    CONNECTION_TEST_FAILED("Connection test failed!"),
    ERROR_CLIENT_IS_REGISTERED_BUT_CANNOT_BE_CONTACTED("Error: Client is registered, but cannot be contacted! Probably the connection timed out"), 
    STATUS_OF_CONNECTION_OK("Status of connection: ok."), 
    CONNECTED("Connected"),
    LISTENING_AT_PORT("Listening at port"), 
    WIRELESS_PROBE_INTERFACE("Wirelss probe interface"), 
    MATRIX_SIGNAL_GRAPH("Matrix Signal - Graph"), 
    Y_WEIGHT_PERCENT("Y-Weight [%]"), 
    CLICK_LEFT_OR_RIGHT_BUTTON("Click Left or Right Mouse Button to Edit Curve"), 
    LINE_PROPERTIES("Line Properties"), 
    DEBUGGING_STEP("Control Debugger"),
    SIZE("Size"), 
    CIRCUIT_MODEL("Circuit Model"), 
    CHARACTERISTIC("Characteristic"), 
    LOSSES_BASED_ON_CIRCUIT_MODEL("Losses based on circuit model"),
    SDFT_FREQUENCY("Frequeny in Hz for a sliding discrete fourier calculation."),
    VALUE("Value"),
    USAGES("Usages"),
    SET_THE_TOTAL_SIMULATION_TIME_TO_THE_GIVEN_VALUE_TEND("Set the total simulation time to the given value Tend."),
    RUNS_THE_SIMULATION_CURRENTLY_LOADED("Runs the simulation currently loaded into GeckoCIRCUITS, "
            + "from start to finish as defined in the simulator settings."),
    INIT_SIMULATION_WO_PARAMETERS("Initializes the simulation. Call before using the simulateStep() " 
                + "or simulateSteps(int steps) functions, i.e. if controlling the simulation step by step is wanted."),
    INIT_SIMULATION_WITH_PARAMETERS("Initializes the simulation with the specified time step and total simulation time."
                + " Call before using the simulateStep() or simulateSteps(int steps) functions, i.e. if controlling "
            + "the simulation step by step is wanted."),
    CONTINUE_SIMULATION_DOC("Continue the preceeding simulation. The simulation stepwidth and simulation"
            + "time are identical to the previous simulation run (if not explicitely changed by the user."),
    SET_DT_DESCRIPTION("Set the simulation stepwidth to the given value dt."),
    GET_DT_DOCUMENTATION("Returns the simulation stepwidth in seconds."),
    GET_TEND_DOCUMENTATION("Returns the total simulation time Tend in seconds."),
    SET_DT_PRE_DOCUMENTATION("Set the pre-simulation stepwidth to the given value dt."),
    GET_DT_PRE_DOCUMENTATION("Returns the pre-simulation stepwidth in seconds."),
    SET_TEND_PRE_DOCUMENTATION("Set the pre-simulation time to the given value Tend in seconds."),
    GET_TEND_PRE_DOCUMENTATION("Returns the total pre-simulation time Tend_pre in seconds"),
    OPEN_FILE_DOCUMENTATION("Opens a model file with the given file path \"fileName\". Both, global an local file paths can be"
                + "<br>applied. Local file paths are local to the .ipes model file location. Please note that this function "
                + "<br>declares a FileNotFoundException. Hence, you have to catch this exception in your code. Example:"
                + "<br><br>"
                + "try  {"
                + "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openFile(\"C:/GeckoCIRCUITS/model.ipes\");"
                + "<br>} catch (FileNotFoundException) {"
                + "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeOutputLn(\"Could not find file: \"+ fileName);"
                + "<br>}"),
    SAVE_FILE_AS_DOCUMENTATION("Save the current model file to the given path \"fileName\". Only global file-paths are accepted."),
    SIMULATE_STEP_DOCUMENTATION("Runs one time step of the simulation."),
    SIMULATE_STEPS_DOCUMENTATION("Runs consecutively the number of simulation time steps specified by \"steps\"."),
    SIMULATE_TIME_DOCUMENTATION("Runs the simulation for the duration of simulation"
                + " time specified by \"time\"."),
    END_SIMULATION_DOCUMENTATION("Finishes the simulation. Use this function if the methods for simulation step-by-step were used."),
    GET_SIGNAL_DATA_DOCUMENTATION("Get the Data, as written into the scope. The signalName parameter is the named input label of"
                + " the scope. The values tStart and tEnd [s] specify the data interval. If you don't want to receive"
                + "all data points, you can set a data skip value e.g. skipPoints = 2 would skip every second data "
                + "point in the specified interval."),
    GET_TIME_ARRAY_DOCUMENTATION("Call this function in combination with getSignalData(...). The returned values "
                + "are the time values corresponding to the signal data from getSignalData()."),
    WRITE_OUTPUT_DOCUMENTATION("Writes the String given as the argument to the Output tab of the GeckoSCRIPT window. "
            + "Use for writing output from your script."),
    WRITE_OUTPUT_LN_DOCUMENTATION("Writes the String given as the argument as a new line to the Output tab "
            + "of the GeckoSCRIPT window. Use for writing output from your script."),
    SET_PARAMETER_DOCUMENTATION("Sets the specified parameter of the specified circuit element. The arguments"
                + " are the name of the element (as specified by the user in GeckoCIRCUITS) and the name of the"
                + " parameter (as seen in the parameter dialog box for each component in GeckoCIRCUITS).<br><br>"
                + "Example: setParameter(\"IGBT.1\",\"rON\",10e-6);"),
    SET_PARAMETERS_DOCUMENTATION("Sets the specified parameters of the specified element, allowing several parameters to be set at"
                + " once. The arguments, besides the element name, are the names of the parameters, as an array"
                + " of Strings, and the values for these parameters, in the same order, as an array of double values.<br><br>"
                + "Example: setParameters(\"IGBT.1\", {\"uDS\", \"rON\", \"rOFF\"}, {0.5, 10e-6, 10e6});"),
    GET_PARAMETER_DOCUMENTATION("Returns the value of the specified parameter of the specified element. The"
                + " arguments are the name of the element (as specified by the user in GeckoCIRCUITS) and the name"
                + " of the parameter (as seen in the \"Available Blocks\" window in GeckoSCRIPT).<br><br>"
                + "Example: R_on = getParameter(\"IGBT.1\",\"rON\");"),
    GET_OUTPUT_DOCUMENTATION("Returns the value of the output port of a control block. The arguments are the"
                + " name of the element (as specified by the user in GeckoCIRCUITS) and the name"
                + " of the output (as seen in the \"Available Blocks\" window in GeckoSCRIPT).<br><br>"
                + "Example: Vout = getOutput(\"VOLT.2\",\"Vmeas\");"),
    GET_OUTPUT_SINGLE_PARAMETER("Returns the value of the output port of a control block which has only one output. "
                + "The argument is the name of the element (as specified by the user in GeckoCIRCUITS)."
                + " Since the control block has only one output port, no specification of output name is"
                + " required. This is applicable only for control blocks with one single output port.<br><br>"
                + "Example: Iin = getOutput(\"AMP.4\");"),
    SET_COMPONENT_NAME_DOCUMENTATION("Change the name of component \"oldName\" to a new name. If the component cannot be found,"
                + " or the new name is already in use, a RuntimeException will be thrown."),
    GET_CIRCUIT_ELEMS_DOC("Returns, as an array of Strings, the names of all the circuit elements"
                + " (e.g. switches, capacitors, resistors...) in the model."),
    GET_CONTROL_ELEMS_DOC("Returns, as an array of Strings, the names of all control elements in the model."),
    GET_THERM_ELEMS_DOC("Returns, as an array of Strings, the names of all thermal elements in the model."),
    GET_SPEC_ELEMS_DOC("Returns, as an array of Strings, the names of all model components that don't fit into the regular categories."),
    GET_IGBTS_DOC("Returns, as an array of Strings, the names of all IGBTs in the model."),
    GET_DIODES_DOC("Returns, as an array of Strings, the names of all diodes in the model."),
    SET_WORKSHEET_SIZE("Set the size of the main circuit sheet."),
    GET_WORKSHEET_SIZE("Get the size of the main circuit sheet as int[2] array."),
    GET_THYRISTORS_DOC("Returns, as an array of Strings, the names of all thyristors in the model."),
    GET_IDEAL_SWITCHES_DOC("Returns, as an array of Strings, the names of all ideal switches in the model."),
    GET_RESISTORS_DOC("Returns, as an array of Strings, the names of all resistors in the model."),
    GET_INDUCTORS_DOC("Returns, as an array of Strings, the names of all inductors in the model."),
    GET_CAPACITORS_DOC("Returns, as an array of Strings, the names of all capacitors in the model."),
    GET_SIG_AVG_DOC("Returns the calculated average value of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" "
                + "cannot be greater than the total simulation time.<br><br>"
                + "Example: double avg = getSignalAvg(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_RMS_DOC("Returns the calculated root-mean-square (RMS) value of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time.<br><br>"
                + "Example: double rms = getSignalRMS(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_MIN_DOC("Returns the minimum value of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater "
            + "than the total simulation time.<br><br>"
                + "Example: double min = getSignalMin(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_MAX_DOC("Returns the maximum value of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time.<br><br>"
                + "Example: double max = getSignalMax(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_THD_DOC("Returns the calculated total harmonic distortion (THD) of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time.<br><br>"
                + "Example: double thd = getSignalTHD(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_RIP_DOC("Returns the calculated ripple of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time.<br><br>"
                + "Example: double ripple = getSignalRipple(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_SHAPE_DOC("Returns the calculated shape factor value of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time.<br><br>"
                + "Example: double shape = getSignalShape(\"U.1\",0,0.5e-3,20e-3);"),
    GET_SIG_KLIRR_DOC("Returns the calculated klirrfactor value of the waveform stored in a particular SCOPE"
                + " channel with a specified Portlabel (\"signalName\"). The times in between which"
                + " the calculation is to take place must also be specified; "
                + "\"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time.<br><br>"
                + "Example: double klirr = getSignalKlirr(\"U.1\",0,0.5e-3,20e-3);"),
    INIT_STEADY_STATE_DETECTION("GeckoSCRIPT provides the ability to simulate a power electronic circuit until a periodic steady-state is reached."
                + " Steady state can be detected for circuits with well-defined periods (e.g. pulse-width modulated converters). To"
                + " initialize steady-state detection, the user must supply the circuit's state variables - those values by which steady-"
                + " state can be detected - these are typically inductor currents and capacitor voltages. The \"stateVariables\""
                + " array should contain the names of the measuring elements for these currents and voltages, and NOT the"
                + " names of the elements themselves, e.g. the name of the element measuring capacitor \"C.1\" e.g. "
                + "\"VOLT.1\" not the name of the capacitor element. The \"frequencies\" array should"
                + "contain the values of all the frequencies"
                + " generated by elements of the circuit e.g. signal sources or voltage and current sources. Specify numerically"
                + " the frequencies themselves, and NOT the names of the elements generating them. The time step and the"
                + " simulation time for the steady-state detection procedure must also be specified.<br><br>"
                + "Example: initSteadyStateDetection(new String[]{\"AMP.2\",\"VOLT.1\"},new double[]{50,200e3},1e-9,500e-6);"),
    INIT_STEADY_STATE_DETECTION_XC("GeckoSCRIPT provides the ability to simulate a power electronic circuit until a periodic steady-state is reached."
                + " Steady state can be detected for circuits with well-defined periods (e.g. pulse-width modulated converters). To"
                + " initialize steady-state detection, the user must supply the circuit's state variables - those values by which steady-"
                + " state can be detected - these are typically inductor currents and capacitor voltages. The \"stateVariables\""
                + " array should contain the names of the measurement signals for these currents and voltages, and NOT the"
                + " names of the elements themselves, e.g. the name of the measurement signal for capacitor \"C.1\" e.g. "
                + "\"uC1\" not the name of the capacitor element. The \"frequency\" field specifies"
                + " the frequency at which steady-state is to be detected at,"
                + " e.g. the switching frequency in a simple buck DC-DC converter or the mains frequency for AC/DC or DC/AC converters."
                + " The time step and the"
                + " simulation time for the steady-state detection procedure must also be specified.<br><br>"
                + "Example: initSteadyStateDetection(new String[]{\"iL\",\"uC\"},200e3,1e-9,500e-6);"),
    SIMULATE_UNTIL_STEADY_STATE("Simulates a model until periodic steady-state is detected or until the end of the defined simulation time."
                + " The function \"initSteadyStateDetection()\" must be called first with the appropriate arguments. Setting "
                + " \"supressMessages\" to \"true\" omits the printing of messages by the function to the GeckoSCRIPT output"
                + " pane and thus speeds up execution. Returned is an array with the results of the steady-state"
                + " detection procedure. The first element in the returned array indicates if steady state has been"
                + " reached (1 if yes, 0 if no), the second the time at which steady state was reached and the third"
                + " the steady-state period.<br><br>"
                + "Example: double steadyStateResults = simulateUntilSteadyState(true);"),
    SIMULATE_TO_STEADY_STATE_DEFAULT("Simulates a model until periodic steady-state is detected or until the end of the defined simulation time."
                + " The function \"initSteadyStateDetection()\" must be called first with the appropriate arguments. Setting "
                + " \"supressMessages\" to \"true\" omits the printing of messages by the function to the GeckoSCRIPT output"
                + " pane and thus speeds up execution. Returned is an array with the results of the steady-state"
                + " detection procedure. The first element in the returned array indicates if steady state has been"
                + " reached (1 if yes, 0 if no), the second the time at which steady state was reached and the third"
                + " the steady-state period. This function uses the default internal GeckoCIRCUITS values for the steady-state detection criteria. To specify these criteria directly, use the version of this function with the two extra arguments.<br><br>"
                + "Example: double steadyStateResults = simulateToSteadyState(true);"),
    SIMULATE_TO_STEADY_STATE("Simulates a model until periodic steady-state is detected or until the end of the defined simulation time."
                + " The function \"initSteadyStateDetection()\" must be called first with the appropriate arguments. Setting "
                + " \"supressMessages\" to \"true\" omits the printing of messages by the function to the GeckoSCRIPT output"
                + " pane and thus speeds up execution. Steady-state is detected by comparing two subsequent periods of simulation"
                + " by two criteria: the cross-correlation coefficient between the two periods, and the difference between the average values (RMS for waveforms with no DC offset)"
                + " of the two periods. In an ideal case, these are 1.0 and 0.0 respectively, but in reality this rarely occurs. Therefore, more realistic values"
                + " must be specified by the arguments \"targetCorrelation\" and \"targetMeanPctDiff\", respectively, e.g. 0.998 and 0.005 (corresponding to 0.5%)."
                + " Steady-state is considered to be reached when the calculated correlation is above the target value, and the average (mean or RMS) percent difference is below the target value."
                + " Returned is an array with the results of the steady-state"
                + " detection procedure. The first element in the returned array indicates if steady state has been"
                + " reached (1 if yes, 0 if no), the second the time at which steady state was reached and the third"
                + " the steady-state period.<br><br>"
                + "Example: double steadyStateResults = simulateToSteadyState(true,0.98,0.01);"),
    GET_FOURIER_1_DOC("Performs an FFT on the data stored in the specified channel of the specified SCOPE, where SCOPE ports are numbered"
                + " from zero starting with the upper-most port on the SCOPE circuit symbol. This function gives the same functionality as the"
                + " \"Analysis -> Fourier\" menu in the SCOPE window. The times in between which the calculation is to take place must also"
                + " be specified; \"startTime\" cannot be less than 0 and \"endTime\" cannot be greater than the total simulation time. "
                + "The number of terms of the Fourier series expansion i.e. harmonics must also be specified. Returned is a two-dimensional "
                + "array which contains the Fourier series coefficients in the following format: [coefficient][coefficient value for <i>n</i>th harmonic]"
                + " where the first (cofficient) index 0 contains coefficient a<sub><i>n</i></sub>, index 1 coefficient b<sub><i>n</i></sub>, index 2 the magnitude c<sub><i>n</i></sub> and index 3"
                + " the phase angle <i>&phi;<sub>n</sub></i>.<br><br>"
                + "Example: double FFT = getFourier(\"SCOPE.1\",2,0.00001,150e-3,20);<br> where the aforementioned coefficients for the e.g. 5th harmonic would be located in FFT[0][5], FFT[1][5], FFT[2][5], FFT[3][5]."),
    GET_FOURIER_2_DOC("Returns, as a two-dimensional array of doubles, calculated Fourier series coefficients for the"
                + " waveform at SCOPE channel at port 0 (the upper-most port). Convenient for use with single-port SCOPEs."),
    SET_LOSS_FILE_DOC("Sets the detailed loss model file for a semiconductor element (IGBT, ideal"
                + "switch, thyristor, or diode)."
                + " Supply the full path name of the file or just the file name in the case it is located in the same directory"
                + " as the opened model file."),
    CREATE_COMPONENT_DOC("Creates a new component in the circuit sheet. The parameter compType specifies the component to create,"
                + " for instance \"R\" to create a new resistor. The new component will get the name \"newElemName\". If you like to"
                + " create a new component inside a subcircuit, then please specify the path to the subcircuit via the \"#\" separator."
                + "<br><br>"
                + "Example:<br>"
                + "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; createComponent(\"C\", \"SUBCIRCUIT.1#C.5\", 5, 5);"),
    CREATE_CONNECTOR_DOC("Creates a new connector (wire) in the circuit sheet. The connector name is for later reference. Qualified,"
                + " path names to subcircuits are possible, as well. For angled connectors, startHorizonal defines the initial direction."                
                + "<br><br>"
                + "Example:<br>"
                + "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; createConnector(\"C\", \"SUBCIRCUIT.1#WIRE.4\", 5, 5, 8, 9, true);"),
    DELETE_COMPONENT_DOC("Deletes the component with the name \"elementName\". In case you like to delete a component"
            + " inside a subcircuit block, please use the path separator \"#\". <br><br>"
            + "Example: deleteComponent(\"SUBCIRCUIT.1#C.5\");"),
    DELETE_ALL_COMPONENTS_DOC("Deletes all component within the given subcircuit sheet. In case \"null\" <br>is passed as parameter, the whole circuit model will be removed."
            + "Example: deleteAllComponents(\"SUBCIRCUIT.1\");"),
    SET_OUTPUT_NODE_NAME_DOC("Sets the output node label to the given value."),
    SET_INPUT_NODE_NAME_DOC("Sets the input node label to the given value."),
    GET_OUTPUT_NODE_NAME_DOC("Return the output node label to the given value."),
    GET_INPUT_NODE_NAME_DOC("Return the input node label to the given value."),
    ROTATE_DOC("Rotates the selected component in clockwise direction."),
    SET_ORIENTATION_DOC("Set the component rotation to a specific value. Allowed values for \"direction\"are \"DOWN\", \"LEFT\", \"UP\", \"RIGHT\";"),
    SET_POSITION_DOC("Places the selected component \"elementName\" within its circuit sheet to the point coordinates (xPosition, yPosition)"),
    GET_POSITION_DOC("Return the selected component \"elementName\" circuit sheet position x and y in an int array."),
    IMPORT_FROM_FILE_DOC("Imports the simulation model from the given file name \"fileName\" into"
                + " the subcircuit named \"insertSubCircuitName\". If the latter string is empty "
                + "or null, the main circuit sheet will be used as import parent."
                + "<br><br>"
                + "Example:<br>"
                + "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; importFromFile(\"/home/test/model1.ipes\", null);"),
    
    DO_OPERATION_DOC("This function allows calling methods that are individual for selected GeckoCIRCUITS components."
            + " The argument \"String opName\" specifies the type of operation. In case a function argument"
            + " is required, include it as \"Object parameterValue\", otherwise the parameter is ignored or may be null."
            + " The return value is null in case a return value does not make sense. Otherwise, it is a plain Java object."
            + "<br>"
            + "<br>Example: return-value (casted to Double), String argument required:<br>"
            + "double result = (Double) doOperation(\"CISPR16.1\", \"getAvgAtFrequency\", 10000);"
            + "<br>"
            + "<br>Please refer to the documentation of a GeckoCIRCUITS component at \"available blocks\"."
            + " There, the list of individual operations on the components is given."),
    SHUTDOWN_DOC("Closes the GeckoCIRCUITS instance via System.exit(0). Be careful: modified models"
            + " will not be saved, the shutdown procedure is immediate!"),
    GET_SIM_TIME_DOC("Returns the actual simulation time in seconds. When executing GeckoCIRCUITS"
            + "step by step, the simulation time increases by dt, respectively."),
    STORED_MATRIX_DOC("This function is a conveniece function, please see also the corresponding setter / getter"
            + "methods. You can use this function as data cache, e.g. for saving simulation data, which you intend,"
            + " for instance, for a postprocessing in your own Java code/scripts. The matrix cache will be stored "
            + "statically within GeckoCIRCUITS. The user is responsible for a proper creation/deletion of the data."),
    GLOBAL_PAR_DOC("Here, you can get/set the GeckoCIRCUITS global parameters (e.g. defined as \"$PARAMETER 123\") within"
            + " the tools / parameters dialog.<br><br>"
            + "Example: double value = getGlobalParameterValue(\"$RES\");"),
    GET_ACC_PARAM_DOC("Returns a String list of all component parameters"),
    FLOAT_FFT_DOC("This is a convenience function for your own Java / scripting code. It performs"
            + " a fast fourier transform on the given data."), 
    SIM_START_CATEGORY("Start / Stop control of simulation functions"),
    LOAD_SAVE_CATEGORY("Loading / Saving of models and components"),
    SIGNAL_PROCESSING("Result evaluation and signal processing"),
    COMPONENT_PROPERTIES("Properties of single components"),
    COMPONENT_CREATION("Create / List / Delete components"),
    ALL_CATEGORIES("All categories"),
    GET_PEAK_AT_FREQ("Return the \"PEAK\"-calculation of the EMI spectrum at the given frequency. "
            + "Function parameter type: Double, return value: Double\""),
    GET_QUASI_PEAK_AT_FREQ("Return the \"QUASI-PEAK\"-calculation of the EMI spectrum at the given frequency. "
            + "Function parameter type: Double, return value: Double"),
    GET_AVG_AT_FREQ("Return the \"AVERAGE\"-calculation of the EMI spectrum at the given frequency. "
            + "Function parameter type: Double, return value: Double\""),
    SAVE_DATA_DOC("Save the calcuation/simulation data in the given file. The function parameter"
            + "must be a String containing a valid filePath, e.g. /home/gecko/data.txt . No "
            + "return value (null)"),
    SAVE_DATA_DOC_BLOCKING("Same behavior as \"doSaveData\", but command waits until results are written to disk. No "
            + "return value (null)"),
    SET_OUTPUT_FILE_NAME("Set the file name to the given value. No return value (null)"),
    START_CALCULATION_DOC("Start the EMI testreceiver calculation with the settings as given"
            + " in the gui. No parameter required (null), no return value (null)"),
    SET_TITLE("Set the title String of the Text-Field component"),
    GET_TITLE("Return the title String of the Text-Field component"),
    GET_TEXT("Return the body text of the Text-Field component"),    
    SET_TEXT("Set the body text of the Text-Field component. Please note: Line-breaks have to be set by the user manually."),    
    SET_NUMERATOR_POLYNOM("Sets the numerator polynom coefficients of the transfer function."
            + "\n The parameter has to be a double[] array containing the numerator coefficients."),
    SET_DENOMINATOR_POLYNOM("Sets the denominator polynom coefficients of the transfer function."
            + "\n The parameter has to be a double[] array containing the numerator coefficients."),
    SET_POLE_COEFF("Sets the transfer function poles. The parameter has to be a double[] array containing"
            + "the pole values.\n Please note: the data has to be in the format new double[] data = {real1, im1, real2, im2, ...}"),
    SET_ZERO_COEFF("Sets the transfer function zeros. The parameter has to be a double[] array containing"
            + "the zero values.\n Please note: the data has to be in the format new double[] data = {real1, im1, real2, im2, ...}"),    
    SET_NONLINEAR_OPERATION_DOC("Operation parameter should be a String containing the filename\n"
            + "to a textfile containing nonlinear characteristics data. After Invoking this method,\nthe component's"
            + "nonlinearity flag will be set. Return-Type: none (null)"), 
    CHECK_CURVES_AT("Check curves at      "),
    SMALL_SIGNAL_OUTPUT_FOR_ANALYSIS("Small signal output for network analysis"),
    EMI_DATA_EXPORT("Please note that only data which is visible in the plot will be exported. To proceed, please select the output unit"
            + "and output file name:"),
    FREQ_START("Fundamental frequency of analysis"),
    FREQ_END("Maximum frequency of analysis"),
    SHOW_RESULT("Displays results"),
    TPRE_SSA("Time until steady-state"),
    DELTAT_SSA("deltaT"),
    SIGNALTYPE_SSA("signalType"),
    NATIVE_LIB("Native Library"),
    NATIVE_LIBS("Native Libraries"),
    IF_TRUE_THEN_POLYNOM("If true use polynom representation of H(s), else use Poles/Zeros."),
    IF_TRUE_THEN_INITIAL("If true, the saved intial state is used at simulation start."),
    IMPORTS_EXAMPLE("Example: doOperation(\"JAVA.1\", \"setImportCode\", \"import static java.lang.Math.*;\");"
            + "   // Function parameter type: String, no return value."),
    SOURCE_CODE("Example: doOperation(\"JAVA.1\", \"setSourceCode\", \"System.out.println(\"source test\"););"
            + "   // Function parameter type: String, no return value."),
    INIT_CODE("Example: doOperation(\"JAVA.1\", \"setInitCode\", \"System.out.println(\"init test\"););"
            + "   // Function parameter type: String, no return value."),
    VARIABLES_CODE("Example: doOperation(\"JAVA.1\", \"setInitCode\", \"double test = 20;););"
            + "   // Function parameter type: String, no return value."),
    SET_COMPONENT_COUPLING("Example: doOperation(\"GATE.1\", \"setComponentCoupling\", \"IGBT.1\");"
            + "   // Function parameter type: String, no return value."),
    SET_COUPLING_LABEL("Example: doOperation(\"VOLT.1\", \"setCouplingLabel\", \"signal\");"
            + "   // Function parameter type: String, no return value."),
    ;
    
    
    
    
    private final static Map<String, I18nKeys> _keyStringToEnumConstant = new HashMap<String, I18nKeys>();
    final String _keyName;
    final String _englishTranslation;

//        i18nEnglishKeyVals(final String keyName, final String englishTranslation) {
//            _keyName = keyName;
//            _englishTranslation = englishTranslation;
//        }
    /**
     * this constructor uses the enum name as the key. Be careful! Changing the
     * enum name will create a problem. Whenever you want to change the enum
     * name, then use the constructor with the explicit key value.
     */
    I18nKeys(final String englishTranslation) {                                                                                                                                        
        _keyName = toString();
        _englishTranslation = englishTranslation;
    }
        
    @Override
    public final String toString() {
        if(_keyName == null) {
            return super.toString();
        } else {
            return _keyName;
        }        
    }

    public static I18nKeys fabricFromKeyString(final String keyString) {
        if (_keyStringToEnumConstant.isEmpty()) {
            for (I18nKeys val : values()) {
                _keyStringToEnumConstant.put(val._keyName, val);
            }
        }
        return _keyStringToEnumConstant.get(keyString);
    }

    public String getEnglishString() {
        return _englishTranslation;
    }

    public String getTranslation() {
        return LangInit.getTranslatedString(this);
    }                    
    

}
